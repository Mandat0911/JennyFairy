export const signupService = async(name, email, password, res) => {
    try {
        if (!name || !email || !password) throw { status: 400, message: "All fields are required!" };
        if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)) throw { status: 400, message: "Invalid email format!" };
        if (await Account.findOne({ email })) throw { status: 400, message: "Email is already taken!" };
        if (password.length < 6) throw { status: 400, message: "Password must be at least 6 characters!" };

        const hashedPassword = await hashPassword(password);
        const verificationToken = generateVerificationToken(6);
        const newAccount = new Account({ email, password: hashedPassword, verificationToken, verificationTokenExpireAt: new Date(Date.now() + 24 * 60 * 60 * 1000), userType: "USER" });
        await newAccount.save();

        const newUser = new User({ name, email, accountId: newAccount._id });
        await newUser.save();
        await sendVerificationEmail(email, newUser.name, verificationToken);

        const { accessToken, refreshToken } = await generateTokens(newAccount._id, email, res);
        await storeRefreshToken(newAccount._id, refreshToken);

        return { user: userDTO(newUser), account: accountDTO(newAccount), token: tokenDTO(accessToken, refreshToken) };
    } catch (error) {
        console.error("Error in signupService:", error.message);
        throw error;
    }
};
